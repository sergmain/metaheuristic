#
# Metaheuristic, Copyright (C) 2017-2023, Innovation platforms, LLC
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

spring.jmx.enabled=false
#spring.profiles.active=dispatcher

#https://docs.spring.io/spring-boot/docs/current/reference/html/web.html#web.graceful-shutdown
server.shutdown=graceful
spring.lifecycle.timeout-per-shutdown-phase=10s

server.http2.enabled=true
#server.connection-timeout=-1
spring.web.resources.static-locations=classpath:/mh-angular

server.forward-headers-strategy=native

spring.jpa.open-in-view=false

# Whether to resolve the multipart request lazily at the time of file or parameter access.
spring.servlet.multipart.resolve-lazily = false
spring.servlet.multipart.enabled = true
spring.servlet.multipart.max-file-size=400MB
spring.servlet.multipart.max-request-size=400MB

# Threshold after which files are written to disk.
spring.servlet.multipart.file-size-threshold = 100KB
# Intermediate location of uploaded files.
spring.servlet.multipart.location = ${mh.home}/multipart-temp


# ===============================
# = Metaheuristic logging
# ===============================

logging.file.name=${mh.home}/logs/mh.log

logging.level.root=warn
logging.level.liquibase.*=info
#logging.level.org.springframework=debug
#logging.level.org.springframework.boot.autoconfigure=debug
#logging.level.org.hibernate.stat=debug

#logging.level.ai.metaheuristic.ai.*=warn
logging.level.ai.metaheuristic.ai.*=info
logging.level.ai.metaheuristic.ai.dispatcher.exec_context.ExecContextReadinessService=warn
logging.level.ai.metaheuristic.ai.dispatcher.exec_context.ExecContextTopLevelService=warn
logging.level.ai.metaheuristic.commons.utils.ZipUtils=debug
logging.level.ai.metaheuristic.ai.dispatcher.source_code.SourceCodeTxService=warn
logging.level.ai.metaheuristic.ai.dispatcher.southbridge.SouthbridgeController=warn
logging.level.ai.metaheuristic.ai.Schedulers=warn
logging.level.ai.metaheuristic.ai.dispatcher.processor.ProcessorCache=warn
logging.level.ai.metaheuristic.ai.dispatcher.commons.ArtifactCleanerAtDispatcher=warn


# ===============================
# = DATA SOURCE
# ===============================
# all dota sources are configured in profile-specific
# application-{h2|mysql|postgresql|generic|custom}.properties files


spring.sql.init.mode=never
spring.flyway.enabled=false

spring.liquibase.enabled=true
spring.liquibase.change-log=classpath:database/main-database-change-log.yaml


# ===============================
# = Tomcat config for Datasource
# ===============================
spring.datasource.tomcat.max-active=100
spring.datasource.tomcat.max-idle=50
spring.datasource.tomcat.min-idle=50
spring.datasource.tomcat.initial-size=50
spring.datasource.tomcat.remove-abandoned=true
spring.datasource.tomcat.test-while-idle= true
spring.datasource.tomcat.validation-query = SELECT 1

# https://stackoverflow.com/questions/60310858/possibly-consider-using-a-shorter-maxlifetime-value-hikari-connection-pool-spr/60380157#60380157
spring.datasource.hikari.max-lifetime = 600000

spring.jpa.defer-datasource-initialization = false
spring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults = false

spring.jpa.generate-ddl = false
spring.jpa.hibernate.ddl-auto = none

spring.jpa.show-sql = false
spring.jpa.properties.hibernate.format_sql = false

# Hibernate ddl auto (create, create-drop, update): with "update" the database
# schema will be automatically updated accordingly to java entities found in
# the project
#spring.jpa.hibernate.ddl-auto = update

# Naming strategy
spring.jpa.properties.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy


# ===============================
# = internal cache
# ===============================
spring.jpa.properties.jakarta.persistence.sharedCache.mode=ENABLE_SELECTIVE

# https://stackoverflow.com/questions/56294726/spring-boot-2-0-hibernate-5-ehcache-3-with-jcache
spring.jpa.properties.hibernate.javax.cache.uri=classpath:/ehcache.xml
spring.jpa.properties.hibernate.javax.cache.provider=org.ehcache.jsr107.EhcacheCachingProvider
spring.jpa.properties.hibernate.javax.cache.missing_cache_strategy=create
spring.jpa.properties.hibernate.cache.use_query_cache=true
spring.jpa.properties.hibernate.cache.use_second_level_cache=true
spring.jpa.properties.hibernate.cache.region.factory_class=org.hibernate.cache.jcache.JCacheRegionFactory
spring.jpa.properties.hibernate.connection.release_mode=jcache

spring.jpa.properties.hibernate.generate_statistics=false

# ===============================
# = ai.metaheuristic
# ===============================
# ------------- common -----------------
mh.thread-number.scheduler=10
mh.thread-number.event=10

mh.cors-allowed-origins=http://localhost:4200, http://localhost:8888, http://localhost:8080

mh.branding=Metaheuristic
mh.event-enabled=true
mh.ssl-required=false



# ------------- Dispatcher --------------
mh.dispatcher.enabled=true
mh.dispatcher.keep-events-in-db=180D

# use gen-passwords application to create actual encoded password
# or
# $2a$10$jaQkP.gqwgenn.xKtjWIbeP4X.LDJx92FKaQ9VfrN2jgdOUTPTMIu
# which is - 123
mh.dispatcher.master-password=$2a$10$jaQkP.gqwgenn.xKtjWIbeP4X.LDJx92FKaQ9VfrN2jgdOUTPTMIu
mh.dispatcher.master-username=q

mh.dispatcher.chunk-size=10MB
mh.dispatcher.function-signature-required=false

mh.dispatcher.asset.mode = local
#mh.dispatcher.asset.source-url = http://localhost:8889
#mh.dispatcher.asset.password=123
#mh.dispatcher.asset.username=rest_user
#mh.dispatcher.asset.sync-timeout=20S

# ------------- processor -----------------
mh.processor.enabled=false

