#
# Metaheuristic, Copyright (C) 2017-2021, Innovation platforms, LLC
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

spring.jmx.enabled=false
spring.profiles.active=dispatcher

server.http2.enabled=true
#server.connection-timeout=-1

server.forward-headers-strategy=native

spring.jpa.open-in-view=false

# Whether to resolve the multipart request lazily at the time of file or parameter access.
spring.servlet.multipart.resolve-lazily = false
spring.servlet.multipart.enabled = true
spring.servlet.multipart.max-file-size=400MB
spring.servlet.multipart.max-request-size=400MB

# Threshold after which files are written to disk.
#spring.servlet.multipart.file-size-threshold = 1024B
# Intermediate location of uploaded files.
spring.servlet.multipart.location = ${MH_HOME}/multipart-temp


logging.level.root = warn

# ---------------- Metaheuristic logging -------------------
#logging.level.ai.metaheuristic.ai.*=warn
logging.level.ai.metaheuristic.ai.*=info
logging.level.ai.metaheuristic.ai.dispatcher.exec_context.ExecContextReadinessService=warn
logging.level.ai.metaheuristic.ai.dispatcher.exec_context.ExecContextTopLevelService=warn
#logging.level.ai.metaheuristic.ai.dispatcher.task.TaskCheckCachingTopLevelService=debug
#logging.level.ai.metaheuristic.ai.dispatcher.task.TaskCheckCachingService=debug
#logging.level.ai.metaheuristic.ai.dispatcher.DispatcherCommandProcessor=debug
logging.level.ai.metaheuristic.commons.utils.ZipUtils=debug
logging.level.ai.metaheuristic.ai.dispatcher.source_code.SourceCodeService=warn
logging.level.ai.metaheuristic.ai.dispatcher.southbridge.SouthbridgeController=warn
logging.level.ai.metaheuristic.ai.Schedulers=warn
logging.level.ai.metaheuristic.ai.dispatcher.processor.ProcessorCache=warn

# ===============================
# = DATA SOURCE
# ===============================

#spring.sql.init.platform=mysql
#spring.sql.init.mode=never
#spring.sql.init.continue-on-error=false

# Set here configurations for the database connection

# Connection url for the database
spring.datasource.url= ${JDBC_DATABASE_URL}
spring.datasource.driver-class-name = ${MH_JDBC_DRIVER_CLASS_NAME}
spring.datasource.username=${JDBC_DATABASE_USERNAME}
spring.datasource.password=${JDBC_DATABASE_PASSWORD}

spring.datasource.tomcat.max-active=100
spring.datasource.tomcat.max-idle=50
spring.datasource.tomcat.min-idle=50
spring.datasource.tomcat.initial-size=50
spring.datasource.tomcat.remove-abandoned=true
spring.datasource.tomcat.test-while-idle= true
spring.datasource.tomcat.validation-query = SELECT 1

# https://stackoverflow.com/questions/60310858/possibly-consider-using-a-shorter-maxlifetime-value-hikari-connection-pool-spr/60380157#60380157
spring.datasource.hikari.max-lifetime = 600000

spring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults = false

spring.jpa.properties.hibernate.dialect=${MH_HIBERNATE_DIALECT}

spring.jpa.show-sql = false
spring.jpa.properties.hibernate.format_sql = false

# Hibernate ddl auto (create, create-drop, update): with "update" the database
# schema will be automatically updated accordingly to java entities found in
# the project
#spring.jpa.hibernate.ddl-auto = update

# Naming strategy
spring.jpa.properties.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy

spring.jpa.properties.javax.persistence.sharedCache.mode=ENABLE_SELECTIVE

# https://stackoverflow.com/questions/56294726/spring-boot-2-0-hibernate-5-ehcache-3-with-jcache
spring.jpa.properties.hibernate.generate_statistics=false
spring.jpa.properties.hibernate.javax.cache.uri=classpath:/ehcache.xml
spring.jpa.properties.hibernate.javax.cache.provider=org.ehcache.jsr107.EhcacheCachingProvider
spring.jpa.properties.hibernate.javax.cache.missing_cache_strategy=create
spring.jpa.properties.hibernate.cache.use_query_cache=true
spring.jpa.properties.hibernate.cache.use_second_level_cache=true
spring.jpa.properties.hibernate.cache.region.factory_class=jcache
spring.jpa.properties.hibernate.connection.release_mode=jcache


# ============== ai.metaheuristic ==================
# ------------- common -----------------
#mh.thread-number=${MH_THREAD_NUMBER}
mh.thread-number.scheduler=10
mh.thread-number.event=10

mh.branding=Metaheuristic


# --- dispatcher ---

mh.dispatcher.enabled=true

#mh.dispatcher.is-ssl-required=${MH_IS_SSL_REQUIRED}

# by default security is enabled
#mh.dispatcher.is-security-enabled=${MH_IS_SECURITY_ENABLED}


#mh.dispatcher.dir=${MH_DISPATCHER_DIR}

### idea why??? ###
mh.dispatcher.dir=mh-dispatcher

#mh.dispatcher.public-key=${MH_PUBLIC_KEY}

# use gen-passwords application to create actual encoded password
# or
# $2a$10$jaQkP.gqwgenn.xKtjWIbeP4X.LDJx92FKaQ9VfrN2jgdOUTPTMIu
# which is - 123
mh.dispatcher.master-password=${MH_MASTER_PASSWORD:#{null}}
mh.dispatcher.master-username=${MH_MASTER_USERNAME:#{null}}

#mh.dispatcher.chunk-size=${MH_CHUNK_SIZE}
# ------------- processor -----------------

#mh.processor.enabled=${MH_IS_PROCESSOR_ENABLED}
mh.processor.enabled=false
mh.processor.dir=mh-processor

